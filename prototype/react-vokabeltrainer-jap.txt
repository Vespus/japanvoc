import React, { useState, useEffect } from 'react';
import { Check, X, RotateCcw, ChevronRight } from 'lucide-react';

// Hauptkomponente
const VokabelQuiz = () => {
  // Zustandsvariablen
  const [vocabulary, setVocabulary] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Konfigurationszustand
  const [quizCount, setQuizCount] = useState(10);
  const [quizDirection, setQuizDirection] = useState('jp-de'); // jp-de, de-jp, random
  const [quizMode, setQuizMode] = useState('kanji'); // kanji, kana, romaji
  const [appState, setAppState] = useState('start'); // start, quiz, result
  
  // Quiz-spezifische Zustände
  const [currentVocabs, setCurrentVocabs] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [revealed, setRevealed] = useState(false);
  const [results, setResults] = useState([]);
  const [incorrectVocabs, setIncorrectVocabs] = useState([]);
  
  // Flag für Wiederholungsmodus
  const [isRepeatMode, setIsRepeatMode] = useState(false);

  // Laden der Vokabeldaten aus JSON
  useEffect(() => {
    const loadVocabulary = async () => {
      try {
        setLoading(true);
        
        // Datei als ArrayBuffer lesen
        const fileBuffer = await window.fs.readFile('japanisch-deutsch.json');
        // In Text umwandeln
        const fileContent = new TextDecoder().decode(fileBuffer);
        
        // JSON parsen
        const data = JSON.parse(fileContent);
        
        if (data && data.cards && Array.isArray(data.cards)) {
          setVocabulary(data.cards);
          setLoading(false);
        } else {
          throw new Error('Ungültiges JSON-Format');
        }
      } catch (err) {
        console.error('Fehler beim Laden der Vokabeldaten:', err);
        setError('Die Vokabeldaten konnten nicht geladen werden.');
        setLoading(false);
      }
    };

    loadVocabulary();
  }, []);

  // Quiz starten - normale Variante
  const startNormalQuiz = () => {
    if (vocabulary.length === 0) {
      setError('Keine Vokabeln verfügbar.');
      return;
    }
    
    // Zufällige Auswahl mit Fisher-Yates Shuffle
    const shuffled = [...vocabulary];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    
    // Auswahl begrenzen
    const selectedVocabs = shuffled.slice(0, Math.min(quizCount, shuffled.length));
    
    // Zurücksetzen und Quiz starten
    setIsRepeatMode(false);
    setCurrentVocabs(selectedVocabs);
    setCurrentIndex(0);
    setRevealed(false);
    setResults([]);
    setIncorrectVocabs([]);
    setAppState('quiz');
  };
  
  // Quiz mit falschen Vokabeln starten
  const startRepeatQuiz = () => {
    if (!incorrectVocabs.length) {
      setError('Keine falschen Vokabeln zum Wiederholen.');
      return;
    }
    
    // Explizite Kopie der falschen Vokabeln erstellen
    const repeatVocabs = [...incorrectVocabs];
    
    // Setze Wiederholungsmodus und starte das Quiz
    setIsRepeatMode(true);
    setCurrentVocabs(repeatVocabs);
    setCurrentIndex(0);
    setRevealed(false);
    setResults([]);
    setAppState('quiz');
  };

  // Antwort bewerten
  const evaluateAnswer = (correct) => {
    // Die aktuelle Vokabel speichern
    const currentVocab = currentVocabs[currentIndex];
    const currentDirection = getCurrentDirection();
    
    // Neues Ergebnis zum Array hinzufügen
    const newResults = [...results, {
      vocab: currentVocab,
      correct: correct,
      direction: currentDirection,
      mode: quizMode
    }];
    
    setResults(newResults);
    
    // Wenn falsch, zu den falschen Vokabeln hinzufügen (aber nur im normalen Modus)
    if (!correct && !isRepeatMode) {
      setIncorrectVocabs(prev => [...prev, currentVocab]);
    }
    
    // Zur nächsten Karte oder zum Ergebnis
    if (currentIndex < currentVocabs.length - 1) {
      setCurrentIndex(currentIndex + 1);
      setRevealed(false);
    } else {
      setAppState('result');
    }
  };

  // Für jede Karte die Richtung bestimmen
  const getCurrentDirection = () => {
    if (quizDirection === 'random') {
      // Bei jeder Karte zufällig entscheiden
      return Math.random() > 0.5 ? 'jp-de' : 'de-jp';
    }
    return quizDirection;
  };

  // Aktuellen Begriff und Übersetzung bestimmen
  const getCurrentTerm = () => {
    if (!currentVocabs[currentIndex]) return { term: '', translation: '', hint: '' };
    
    const direction = getCurrentDirection();
    const vocab = currentVocabs[currentIndex];
    
    if (direction === 'jp-de') {
      // Je nach ausgewähltem Modus den japanischen Begriff anzeigen
      let term;
      if (quizMode === 'kanji') {
        term = vocab.kanji;
      } else if (quizMode === 'kana') {
        term = vocab.kana;
      } else {
        term = vocab.romaji;
      }
      
      // Hinweis für Hilfsinformationen
      let hint = '';
      if (quizMode === 'kanji') {
        hint = vocab.kana;
      }
      
      return { 
        term: term, 
        translation: vocab.de,
        hint: hint
      };
    } else {
      // Deutsch -> Japanisch
      return { 
        term: vocab.de, 
        translation: quizMode === 'kanji' ? vocab.kanji : 
                     quizMode === 'kana' ? vocab.kana : vocab.romaji,
        hint: quizMode === 'kanji' ? vocab.kana : ''
      };
    }
  };

  // Prozent der richtigen Antworten berechnen  
  const getCorrectPercentage = () => {
    if (results.length === 0) return 0;
    return Math.round((results.filter(r => r.correct).length / results.length) * 100);
  };

  // Quiz zurücksetzen
  const resetQuiz = () => {
    setAppState('start');
    setIsRepeatMode(false);
  };
  
  // Quiz abbrechen
  const cancelQuiz = () => {
    setAppState('start');
  };

  // Start-Bildschirm rendern
  const renderStartScreen = () => (
    <div className="flex flex-col items-center p-6 bg-white rounded-lg shadow-lg max-w-md w-full">
      <h1 className="text-2xl font-bold mb-6 text-center text-blue-600">Japanisch-Deutsch Vokabeltrainer</h1>
      
      <div className="w-full mb-6">
        <p className="mb-2 font-medium">Anzahl der Vokabeln: {vocabulary.length}</p>
        <p className="mb-4">Wie viele Vokabeln möchtest du üben?</p>
        
        <input 
          type="range" 
          min="1" 
          max={Math.min(50, vocabulary.length || 50)} 
          value={quizCount} 
          onChange={e => setQuizCount(parseInt(e.target.value))}
          className="w-full mb-2"
        />
        
        <div className="flex justify-between">
          <span>1</span>
          <span className="font-bold">{quizCount}</span>
          <span>50</span>
        </div>
      </div>
      
      <div className="w-full mb-6">
        <p className="mb-4 font-medium">Wähle die Richtung:</p>
        
        <div className="flex flex-col space-y-2">
          <label className="flex items-center cursor-pointer space-x-2">
            <input 
              type="radio" 
              name="direction" 
              checked={quizDirection === 'jp-de'} 
              onChange={() => setQuizDirection('jp-de')}
              className="h-4 w-4 text-blue-600"
            />
            <span>Japanisch → Deutsch</span>
          </label>
          
          <label className="flex items-center cursor-pointer space-x-2">
            <input 
              type="radio" 
              name="direction" 
              checked={quizDirection === 'de-jp'} 
              onChange={() => setQuizDirection('de-jp')}
              className="h-4 w-4 text-blue-600"
            />
            <span>Deutsch → Japanisch</span>
          </label>
          
          <label className="flex items-center cursor-pointer space-x-2">
            <input 
              type="radio" 
              name="direction" 
              checked={quizDirection === 'random'} 
              onChange={() => setQuizDirection('random')}
              className="h-4 w-4 text-blue-600"
            />
            <span>Zufällig gemischt</span>
          </label>
        </div>
      </div>
      
      <div className="w-full mb-6">
        <p className="mb-4 font-medium">Japanisch-Modus:</p>
        
        <div className="flex flex-col space-y-2">
          <label className="flex items-center cursor-pointer space-x-2">
            <input 
              type="radio" 
              name="mode" 
              checked={quizMode === 'kanji'} 
              onChange={() => setQuizMode('kanji')}
              className="h-4 w-4 text-blue-600"
            />
            <span>Kanji (漢字)</span>
          </label>
          
          <label className="flex items-center cursor-pointer space-x-2">
            <input 
              type="radio" 
              name="mode" 
              checked={quizMode === 'kana'} 
              onChange={() => setQuizMode('kana')}
              className="h-4 w-4 text-blue-600"
            />
            <span>Kana (かな)</span>
          </label>
          
          <label className="flex items-center cursor-pointer space-x-2">
            <input 
              type="radio" 
              name="mode" 
              checked={quizMode === 'romaji'} 
              onChange={() => setQuizMode('romaji')}
              className="h-4 w-4 text-blue-600"
            />
            <span>Rōmaji (Umschrift)</span>
          </label>
        </div>
      </div>
      
      <button 
        onClick={startNormalQuiz}
        className="w-full py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
      >
        Quiz starten
      </button>
    </div>
  );

  // Karteikarte rendern
  const renderCard = () => {
    const { term, translation, hint } = getCurrentTerm();
    const cardNumber = currentIndex + 1;
    const totalCards = currentVocabs.length;
    
    return (
      <div className="flex flex-col items-center p-6 bg-white rounded-lg shadow-lg max-w-md w-full">
        <div className="w-full flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold text-blue-600">
            {isRepeatMode ? "Wiederholung" : "Karteikarte"}
          </h2>
          <span className="text-gray-500">{cardNumber} von {totalCards}</span>
        </div>
        
        <div className="w-full h-64 bg-gray-50 rounded-lg shadow-inner mb-4 flex flex-col justify-center p-4">
          <div className="text-center mb-6">
            <p className="text-lg font-medium text-gray-600">Vokabel:</p>
            <p className="text-2xl font-bold break-words">{term}</p>
            {hint && (
              <p className="text-base text-gray-500 mt-2">{hint}</p>
            )}
          </div>
          
          {revealed ? (
            <div className="text-center">
              <p className="text-lg font-medium text-gray-600">Übersetzung:</p>
              <p className="text-2xl font-bold break-words">{translation}</p>
              
              {getCurrentDirection() === 'de-jp' && quizMode === 'kanji' && (
                <p className="text-base text-gray-500 mt-2">
                  {currentVocabs[currentIndex].kana} ({currentVocabs[currentIndex].romaji})
                </p>
              )}
            </div>
          ) : (
            <button 
              onClick={() => setRevealed(true)}
              className="mx-auto px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
            >
              Aufdecken
            </button>
          )}
        </div>
        
        {revealed ? (
          <div className="w-full flex justify-around mt-4">
            <button 
              onClick={() => evaluateAnswer(true)}
              className="flex items-center justify-center w-24 py-3 bg-green-500 text-white font-medium rounded-lg hover:bg-green-600 transition-colors"
            >
              <Check className="mr-1" size={20} />
              Gewusst
            </button>
            
            <button 
              onClick={() => evaluateAnswer(false)}
              className="flex items-center justify-center w-24 py-3 bg-red-500 text-white font-medium rounded-lg hover:bg-red-600 transition-colors"
            >
              <X className="mr-1" size={20} />
              Nicht gewusst
            </button>
          </div>
        ) : (
          <button
            onClick={cancelQuiz}
            className="mt-4 px-4 py-2 bg-gray-200 text-gray-800 font-medium rounded-lg hover:bg-gray-300 transition-colors"
          >
            Quiz abbrechen
          </button>
        )}
      </div>
    );
  };

  // Ergebnis-Bildschirm rendern
  const renderResultScreen = () => {
    const correctCount = results.filter(r => r.correct).length;
    const totalCount = results.length;
    const percentage = getCorrectPercentage();
    const hasIncorrect = incorrectVocabs.length > 0 && !isRepeatMode;
    
    return (
      <div className="flex flex-col items-center p-6 bg-white rounded-lg shadow-lg max-w-md w-full">
        <h2 className="text-2xl font-bold mb-4 text-center text-blue-600">
          {isRepeatMode ? "Wiederholung beendet" : "Ergebnis"}
        </h2>
        
        <div className="w-full bg-gray-50 rounded-lg p-6 mb-6">
          <div className="text-center mb-6">
            <p className="text-lg mb-2">Du hast <span className="font-bold text-blue-600">{correctCount}</span> von <span className="font-bold">{totalCount}</span> Vokabeln gewusst.</p>
            <div className="relative h-4 bg-gray-200 rounded-full overflow-hidden">
              <div 
                className={`absolute top-0 left-0 h-full ${percentage >= 70 ? 'bg-green-500' : percentage >= 40 ? 'bg-yellow-500' : 'bg-red-500'}`}
                style={{ width: `${percentage}%` }}
              ></div>
            </div>
            <p className="mt-2 font-bold text-lg">{percentage}%</p>
          </div>
          
          {hasIncorrect && (
            <div className="text-center mb-4">
              <p className="mb-2">Du hast <span className="font-bold text-red-500">{incorrectVocabs.length}</span> Vokabeln falsch beantwortet.</p>
            </div>
          )}
        </div>
        
        <div className="w-full flex flex-col space-y-3">
          {hasIncorrect && (
            <button 
              onClick={startRepeatQuiz}
              className="w-full py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center"
            >
              <RotateCcw className="mr-2" size={18} />
              Falsche Vokabeln wiederholen
            </button>
          )}
          
          <button 
            onClick={resetQuiz}
            className="w-full py-3 bg-gray-200 text-gray-800 font-medium rounded-lg hover:bg-gray-300 transition-colors flex items-center justify-center"
          >
            <ChevronRight className="mr-2" size={18} />
            Zurück zum Start
          </button>
        </div>
      </div>
    );
  };

  // Lade-Bildschirm oder Fehler anzeigen
  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center h-full">
        <div className="w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mb-4"></div>
        <p className="text-gray-600">Lade Vokabeldaten...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-full p-4 text-center">
        <div className="bg-red-100 text-red-600 p-4 rounded-lg mb-4">
          <p className="font-bold">Fehler</p>
          <p>{error}</p>
        </div>
        <p>Bitte lade die Seite neu oder versuche es später noch einmal.</p>
      </div>
    );
  }

  // Hauptkomponente rendern je nach Zustand
  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100">
      {appState === 'start' && renderStartScreen()}
      {appState === 'quiz' && renderCard()}
      {appState === 'result' && renderResultScreen()}
    </div>
  );
};

export default VokabelQuiz;