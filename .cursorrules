# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Tailwind CSS v3.4+ requires array syntax in PostCSS config: plugins: [require('tailwindcss'), require('autoprefixer')] instead of object syntax

# Scratchpad

## Aufgabe: Japanisch-Deutsch Vokabeltrainer Verbesserung

### Ziel
Schrittweise Verbesserung eines bestehenden React-basierten Vokabeltrainers mit folgenden Features:
0. Startbildschirm analog italienischem Vokabeltrainer
1. Vokabel-Suchfunktion mit Live-Ergebnissen
2. Vokabel-Bearbeitung und -Löschung
3. Neue Vokabeln hinzufügen
4. Spaced Repetition (SM-2 Algorithmus) implementieren

### Aktueller Status
- Bestehender Prototyp in `prototype/` Ordner
- JSON-Datei mit 500 Vokabeln vorhanden
- React-Komponente für Quiz-Funktionalität implementiert

### Geplante Schritte
[X] 1. Entwicklungsumgebung aufsetzen (React-Projekt, Dependencies)
[X] 2. JSON-Struktur für SM-2 erweitern
[X] 3. Startbildschirm implementieren
[X] 4. Suchfunktion entwickeln
[X] 5. CRUD-Operationen für Vokabeln
[X] 6. SM-2 Algorithmus implementieren
[ ] 7. Mobile Optimierung
[ ] 8. Vercel Deployment vorbereiten
[ ] 9. KI-gestütztes Vokabel-Erweiterungs-Tool

### Technische Entscheidungen
- Datenpersistierung: LocalStorage (für Einfachheit)
- SM-2 Standard-Parameter verwenden
- React Router für Navigation
- Tailwind CSS für Styling (bereits verwendet)

### Abgeschlossen
✅ React-Projekt mit TypeScript erstellt
✅ Dependencies installiert: react-router-dom, lucide-react
✅ Tailwind CSS konfiguriert und getestet
✅ Vokabeldaten in public/ kopiert
✅ Entwicklungsserver läuft fehlerfrei
✅ Tailwind CSS funktioniert korrekt (Test erfolgreich)
✅ JSON-Struktur für SM-2 erweitert (500 Vokabeln + Backup)
✅ Startbildschirm implementiert (analog italienischem Trainer)
✅ TypeScript-Interfaces für Datenstrukturen erstellt
✅ Projektstruktur organisiert (components, hooks, utils)
✅ Suchfunktion mit Live-Ergebnissen implementiert
✅ Navigation zwischen Views implementiert
✅ Custom Hooks für Datenmanagement erstellt
✅ CRUD-Operationen vollständig implementiert:
  - useVocabularyManager Hook mit LocalStorage-Persistierung
  - AddVocabulary Komponente mit Validierung und Duplikat-Prüfung
  - EditVocabulary Komponente mit SM-2 Statistiken
  - Löschfunktion mit Bestätigungsdialog
  - Echte Statistiken im Startbildschirm
  - Vollständige Navigation zwischen allen Views

✅ SM-2 Algorithmus vollständig implementiert:
  - SM-2 Utility-Funktionen (calculateSM2, isDue, sortByPriority)
  - QuizSelection Komponente mit 4 Modi und Info-Modal
  - Quiz Komponente mit Qualitätsbewertung (0-5)
  - Automatische Intervall-Berechnung und Persistierung
  - Lernstatistiken und Session-Tracking
  - Detaillierte SM-2 Erklärung für Benutzer

✅ Quiz-Konfiguration und Einstellungen implementiert:
  - Settings Komponente mit Quiz-Konfiguration
  - 4 Abfragerichtungen: Japanisch→Deutsch, Deutsch→Japanisch, Kanji→Lesung, Zufällig
  - Konfigurierbare Anzahl Vokabeln pro Quiz (5-50)
  - LocalStorage-Persistierung der Einstellungen
  - Integration in QuizSelection und Quiz-Komponenten
  - Dynamische Quiz-Anzeige je nach Abfragerichtung

✅ Mobile UX Optimierung (Apple HIG konform):
  - Tab Bar Navigation mit 4 Haupttabs (Quiz, Vokabeln, Statistiken, Einstellungen)
  - Touch-freundliche Buttons (44pt+ Touch Targets)
  - Vollbild-optimierte Quiz-Karten mit prominenter Kanji-Darstellung
  - Verbesserte Visual Hierarchy und Farbkontraste
  - Quiz beenden Button und optimierte Action Buttons
  - Entfernung redundanter Navigation-Elemente
  - Apple HIG konforme Gestaltung mit Gradients und Schatten

✅ Design-Umstellung auf Creme-Beige Palette abgeschlossen:
  - Elegante Creme/Beige Palette implementiert
  - Design-Test Dateien und Code entfernt
  - Finale Farbpalette in allen Komponenten umgesetzt
  - Japanische Schriftzeichen im Header hinzugefügt (学習への愛)
  - Einstellungs-Symbol aus Header entfernt

### Aktuelle Aufgabe: Design-Umstellung auf Creme-Beige Palette
[X] 1. App.tsx - Haupthintergrund anpassen
[X] 2. TabBar - Elegante Creme/Beige Farben
[X] 3. QuizTab - Startbildschirm umgestalten
[X] 4. Quiz - Karten und Bewertungsbuttons
[X] 5. VocabularyTab - Suchbereich und Vokabelliste
[X] 6. StatsTab - Statistiken-Design
[X] 7. Settings - Einstellungsseite
[X] 8. AddVocabulary - Formular-Design
[X] 9. EditVocabulary - Bearbeitungsformular
[X] 10. Japanische Schriftzeichen im Header + Einstellungs-Symbol entfernt

### Design-Umstellung vollständig abgeschlossen! ✅

### Design-Palette (Creme-Beige):
- Hintergründe: amber-50, stone-50, orange-50
- Hauptfarben: stone-700, amber-700/800
- Signalfarben: teal-600, rose-300
- Akzente: amber-200, stone-200
- Typografie: font-light, font-extralight, tracking-wide 

## Neue Aufgabe: KI Vokabel Feature - Prototyp

### Implementierungsplan
[X] 1. Basis-Setup
    - Prototyp-Komponente erstellen
    - Einfache UI mit Anzahl-Eingabe
    - Test-Button in Settings.tsx

[X] 2. API-Integration
    - Anthropic/Claude Client Setup
    - API-Key Management
    - Test-Call

[ ] 3. Vokabel-Generierung
    - Prompt-Design
    - Response-Parsing
    - Fehlerbehandlung

[ ] 4. Duplikatprüfung
    - Vergleichslogik
    - Vorschau-Interface
    - Bestätigung/Ablehnung

[ ] 5. Test-Integration
    - Temporäre Speicherung
    - Test-Training
    - Feedback

### Aktueller Schritt: Vokabel-Generierung
- Prompt-Design
- Response-Parsing
- Fehlerbehandlung

### Abgeschlossen
✅ Basis-Setup:
  - KiVocabPrototype Komponente erstellt
  - Einfache UI mit Anzahl-Eingabe implementiert
  - Test-Button in Settings.tsx hinzugefügt
  - Modal-Dialog mit Schließen-Funktion
  - Ladezustand für API-Call vorbereitet

✅ API-Integration:
  - API-Route für Vokabelgenerierung erstellt
  - Vercel Environment Variable konfiguriert
  - Frontend-Integration implementiert
  - Fehlerbehandlung hinzugefügt
  - Vorschau der generierten Vokabeln

### Nächster Schritt
- Prompt-Design optimieren
- Response-Parsing verbessern
- Fehlerbehandlung erweitern 